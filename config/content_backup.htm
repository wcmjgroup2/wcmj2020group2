<h1>About  </h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop  </h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<p></p>
<h1>Group2  </h1>
<p>team member</p>
<p><span>group 2</span><br/><span>Repository:<span> </span></span><a href="https://github.com/50833101/wcmj2020">50833101</a><span><span> </span>| Site:<span> </span></span><a href="https://50833101.github.io/wcmj2020">50833101</a>   許智淵<br/><span>Repository:<span> </span></span><a href="https://github.com/50833107/wcmj2020">50833107</a><span><span> </span>| Site:<span> </span></span><a href="https://50833107.github.io/wcmj2020">50833107</a>   許瑋宸<br/><span>Repository:<span> </span></span><a href="https://github.com/50833108/wcmj2020">50833108</a><span><span> </span>| Site:<span> </span></span><a href="https://50833108.github.io/wcmj2020">50833108</a>   廖偵佑<br/><span>Repository:<span> </span></span><a href="https://github.com/50833111/wcmj2020">50833111</a><span><span> </span>| Site:<span> </span></span><a href="https://50833111.github.io/wcmj2020">50833111</a>    施奕宏<br/><span>Repository:<span> </span></span><a href="https://github.com/50833117/wcmj2020">50833117</a><span><span> </span>| Site:<span> </span></span><a href="https://50833117.github.io/wcmj2020">50833117</a>    陳智揚<br/><span>Repository:<span> </span></span><a href="https://github.com/50833119/wcmj2020">50833119</a><span><span> </span>| Site:<span> </span></span><a href="https://50833119.github.io/wcmj2020">50833119</a>    廖翊丞<br/><span>Repository:<span> </span></span><a href="https://github.com/50833122/wcmj2020">50833122</a><span><span> </span>| Site:<span> </span></span><a href="https://50833122.github.io/wcmj2020">50833122</a>   陳柏均<br/><span>Repository:<span> </span></span><a href="https://github.com/50833126/wcmj2020">50833126</a><span><span> </span>| Site:<span> </span></span><a href="https://50833126.github.io/wcmj2020">50833126</a>   魏崇智<br/><span>Repository:<span> </span></span><a href="https://github.com/50833130/wcmj2020">50833130</a><span><span> </span>| Site:<span> </span></span><a href="https://50833130.github.io/wcmj2020">50833130</a>   張育銓<br/><span>Repository:<span> </span></span><a href="https://github.com/50833134/wcmj2020">50833134</a><span><span> </span>| Site:<span> </span></span><a href="https://50833134.github.io/wcmj2020">50833134</a>   林昆輝</p>
<h2>w1-w6</h2>
<h4>type of computer</h4>
<p>1.super computer (超級電腦)    batch computation(批次運算)<br/>2.mainframe 伺服器主機 (cluster 叢集)<br/>3.server 伺服器 (實體，虛擬)<br/>4.Personal Computer<br/>5.micro controller (微控制器)  rasberry pi 樹莓派 (小PC) embedded 嵌入式<br/>6.Mobile phone (手機)</p>
<h4><span>建立個人Blogger</span></h4>
<h4><span>建立個人Github帳號</span></h4>
<h4>建立個人倉儲</h4>
<h5>step 1  &lt;3</h5>
<h5>登入 gm 帳號後, 下載<span> </span><a href="https://drive.google.com/open?id=1SvMKQFViJ0mskt20UhSqkjzckB3noSJH" rel="nofollow">https://drive.google.com/open?id=1SvMKQFViJ0mskt20UhSqkjzckB3noSJH</a><span> </span>至 downloads 目錄, 然後以 7zip 解開到 C:\wcmj2020 目錄下</h5>
<h5>step 2  &lt;3</h5>
<h5>解開後的目錄為 c:\wcmj2020\wcm2020, 其中有 start.bat 與 stop.bat, 開啟可攜系統時, 以滑鼠點擊 start.bat, 關閉可攜系統時, 以滑鼠點擊 stop.bat</h5>
<h5>step 3  &lt;3</h5>
<h5>登入以個人學號所建立的 github 帳號, 然後建立 wcmj2020 倉儲.</h5>
<h5>step 4  &lt;3</h5>
<h5>將遠端的 wcmj2020 以 git clone 取下.</h5>
<h5>git clone<span> </span><a href="https://github.com/%E5%AD%B8%E8%99%9F/wcmj2020.git">https://github.com/學號/wcmj2020.git</a></h5>
<h5>step 5  &lt;3</h5>
<h5>git submodule add<span> </span><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a><span> </span>cmsimde</h5>
<h5>step 6  &lt;3</h5>
<h5>進入 cmsimde 以 python wsgi.py 啟動動態系統</h5>
<h5>以瀏覽器<span> </span><a href="https://localhost:9443/" rel="nofollow">https://localhost:9443</a><span> </span>可以利用 admin 為帳號登入管理</h5>
<h5>step 7  &lt;3</h5>
<h5>動態系統維護後, 轉為靜態.再推至遠端</h5>
<p></p>
<h2>課堂補充</h2>
<p>inter-net(網際,inter+network)==inter-national<br/>protocol(協定)<br/>tcp/ip == transmision control protocol / internet protocol<br/>IPv4 version(版本) 4 IP 4個區段，用「.」隔開<br/>IPv6 version 6 IP 8個區段，用「:」隔開<br/>中華電信 dns server 2001:b000:168::1<br/>dns == domain name server 符號名稱伺服器</p>
<h2>W7-W9</h2>
<p><span>下載可攜程式系統利用  git 指令建立 cmsimde 網站<br/></span></p>
<p><span>使用亂數分組將班上分為4組，並決定各組組長，交代下周上課事宜(線上上課)</span></p>
<p>重新下載<span> </span><a href="https://drive.google.com/open?id=1xDTDfcHU18ipqZNbOufMkSZqibqNeL2T">wcmj2020_tool.7z</a>, 檔案大小為 435 MB, 解開壓縮後為 1.8 GB (其中包括 Mypaint, Dia 與 OBS 等).學會利用 ShareX 與 OBS 拍攝螢幕操作影片, 並將個人維護倉儲與網站的過程影片放入個人網站中.</p>
<p>期中考:第九週實習</p>
<h2>W10-W14</h2>
<p>以SSH維護倉儲<br/>由於在電腦教室時採用純 IPv6 協定上網, 因此為了能夠在近端將倉儲改版資料推送到目前只接受 IPv4 協定連線的 github, 以下除了將原本以 https 對 github 連線, 改為以 ssh 協定連線外, 在 Windows 環境下必須利用 putty 與 plink, 設定 putty 格式的 .ppk 以及能夠同時支援 IPv4 與 IPv6 的代理主機.</p>
<p>設定步驟如下:</p>
<p>1. 下載 Putty 工具組</p>
<p><span>從 </span><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/" rel="nofollow">https://www.chiark.greenend.org.uk/~sgtatham/putty/</a><span><span> </span>下載一般版, 或從<span> </span></span><a href="http://jakub.kotrla.net/putty/" rel="nofollow">http://jakub.kotrla.net/putty/</a><span><span> </span>下載特殊的可攜版本.</span></p>
<p><span>2. 利用 y:\portablegit\bin\sh.exe 進入 shell 命令環境後，</span></p>
<div>
<div class="syntaxhighlighter js" id="highlighter_886664"></div>
</div>
<p>在 /y/home/.ssh 目錄下建立 id_rsa 與 id_rsa.pub 等 private key 與 public key</p>
<p>之後以 SciTE 開啟 id_rsa.pub 後, 將此 public key 的內容, 以新增添加到 Github.com 帳號下 personal settings -&gt; SSH and GPG keys 頁面下.</p>
<p>3. 接下來要利用 puttygen.exe 將 id_rsa 轉為 Putty 可以解讀的 .ppk 格式, 並修改隨身系統的啟動批次檔案, 指定利用 putty 目錄下的 plink 執行 git 指令的網路代理設定.</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_668453"></div>
</div>
<p>4. 利用 puttygen.exe 載入第二步驟所建立的 private key, 也就是 id_rsa.</p>
<p>開啟 puttygen 之後, 以右下方的 load 載入 id_rsa, 成功載入後, 利用 save private key 按鈕, 將已經轉為 putty 格式的 .ppk 存檔. 此一 .ppk 檔案必須在設定 putty 中 github.com session 時, 在 Connection-&gt;SSH-&gt;Auth 項目下, 將轉檔後的 .ppk 指向 private key file for authentication 欄位. </p>
<p>並在 Connection-&gt;Proxy 項目下, 指定 Proxy type: HTTP, 並將 IPv6 代理主機設為 ::53 或 ::42 埠號設為 3128.</p>
<p>5. 之後確定 home 下的 .ssh 目錄中的 config 設定檔案為:</p>
<p><span>6. 最後再將 wcmj2020 倉儲中 .git 目錄下的 config 檔案中的連線協定, 由 https 改為採 ssh 連線，之後就可以透過近端的 .ppk private key 與 Github.com 上的 public key 對應, 無需輸入帳號密碼就可以進行 git push.了。<br/></span></p>
<h4><span>Pelican Blog 內容與 Google Blogger 同步<br/></span></h4>
<p>利用 Windows 10 設定 -&gt; 選擇預設網頁瀏覽器, 使用 Google Chrome 作為預設瀏覽器.</p>
<p><span>隨身程式系統必須安裝 </span><span>google-api-python-client 與 oauth2client</span><br/><br/><span>       &lt;pip install google-api-python-client oauth2client&gt;</span><br/><br/></p>
<p><span>在leo editer 建立add_to_blogger 及edit_to_blogger 兩個按鈕</span></p>
<p><span>將<a href="http://mde.tw/wcmj2020/content/W12-W13.html">網站</a>上的按鈕內容複製貼上到leo editer 的按鈕內容裡</span></p>
<p><span>利用學生帳號登入<a href="https://console.developers.google.com/projectselector2/apis/credentials/consent?supportedpurview=project">google blogger api</a></span></p>
<p>開啟blogger API服務</p>
<p>建立一個Desktop client 類型的憑證</p>
<p>並將其儲存成client_secrets.json<br/><br/><span>使用者完成 client_secrets.json 設定後, 必須將檔案存在倉儲目錄外部</span></p>
<p><span>即可使用add_to_blogger按鈕將網誌新增至google blogger</span></p>
<p>使用edit_to_blogger按鈕將更新後的網誌同步至google blogger</p>
<h2>W15-W18</h2>
<p>期末分組報告，以及個人整理好自己的網站、倉儲，用大概兩分鐘說明自己本學期收穫。</p>
<h1>課堂補充</h1>
<p>inter-net(網際,inter+network)==inter-national<br/>protocol(協定)<br/>tcp/ip == transmision control protocol / internet protocol<br/>IPv4 version(版本) 4 IP 4個區段，用「.」隔開<br/>IPv6 version 6 IP 8個區段，用「:」隔開<br/>中華電信 dns server 2001:b000:168::1<br/>dns == domain name server 符號名稱伺服器</p>
<h4><br/>常見縮寫</h4>
<p><br/><b>URL:U<span>niform</span><span> </span><b>R</b><span>esource</span><span> </span><b>L</b><span>ocator</span><br/>統一資源定位符</b>是<a class="mw-redirect" href="https://zh.wikipedia.org/wiki/%E5%9B%A0%E7%89%B9%E7%BD%91" title="網際網路">網際網路</a>上標準的資源的位址（<span lang="en">Address</span>），如同在網路上的門牌。它最初是由<a href="https://zh.wikipedia.org/wiki/%E8%92%82%E5%A7%86%C2%B7%E4%BC%AF%E7%BA%B3%E6%96%AF-%E6%9D%8E" title="提姆·柏內茲-李">提姆·柏內茲-李</a>發明用來作為<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91" title="全球資訊網">全球資訊網</a>的位址，現在它已經被<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91%E8%81%94%E7%9B%9F" title="全球資訊網協會">全球資訊網協會</a>編制為網際網路標準<a class="external mw-magiclink-rfc" href="https://tools.ietf.org/html/rfc1738" rel="nofollow">RFC 1738</a>。</p>
<p>在網際網路的歷史上，統一資源定位符的發明是一個非常基礎的步驟。統一資源定位符的語法是一般的，可延伸的，它使用<a class="mw-redirect" href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9B%BD%E4%BF%A1%E6%81%AF%E4%BA%A4%E6%8D%A2%E6%A0%87%E5%87%86%E4%BB%A3%E7%A0%81" title="美國資訊交換標準代碼">美國資訊交換標準代碼</a>的一部分來表示網際網路的位址。統一資源定位符的開始，一般會標誌著一個電腦網路所使用的網路協定。</p>
<p>統一資源定位符的標準格式如下：</p>
<blockquote class="templatequote">
<p>[協定類型]://[伺服器位址]:[埠號]/[資源層級UNIX檔案路徑][檔名]?[查詢]#[片段ID]</p>
</blockquote>
<p>統一資源定位符的完整格式如下：</p>
<blockquote class="templatequote">
<p>[協定類型]://[存取資源需要的憑證資訊]@[伺服器位址]:[埠號]/[資源層級UNIX檔案路徑][檔名]?[查詢]#[片段ID]</p>
</blockquote>
<p>其中[存取憑證資訊]、[埠號]、[查詢]、[片段ID]都屬於選填項。</p>
<p><strong>UEFI:Unified Extensible Firmware Interface</strong></p>
<p><b>統一可延伸韌體介面，</b>是一种<a class="mw-redirect" href="https://zh.wikipedia.org/wiki/%E5%80%8B%E4%BA%BA%E9%9B%BB%E8%85%A6" title="個人電腦">個人電腦</a>系统規格，用來定義<a class="mw-redirect" href="https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1" title="作業系統">作業系統</a>與系統<a class="mw-redirect" href="https://zh.wikipedia.org/wiki/%E5%9B%BA%E4%BB%B6" title="固件">固件</a>之間的<a href="https://zh.wikipedia.org/wiki/%E4%BB%8B%E9%9D%A2_(%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88)" title="介面 (程式設計)">軟件界面</a>，作為<a href="https://zh.wikipedia.org/wiki/BIOS" title="BIOS">BIOS</a>的替代方案。可扩展固件接口負責<a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E7%94%B5%E8%87%AA%E6%A3%80" title="加电自检">加電自檢</a>（POST）、联系作業系統以及提供連接作業系統與硬體的介面。</p>
<p>UEFI的前身是<a class="mw-redirect" href="https://zh.wikipedia.org/wiki/Intel" title="Intel">Intel</a>在1998年开始開發的<span lang="en">Intel Boot Initiative</span>，后来被重命名为<b>可延伸韌體介面</b>（<span lang="en">Extensible Firmware Interface</span>，簡稱:<span lang="en"><b>EFI</b></span>）。Intel在2005年将其交由<a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%8F%AF%E6%89%A9%E5%B1%95%E5%9B%BA%E4%BB%B6%E6%8E%A5%E5%8F%A3%E8%AE%BA%E5%9D%9B" title="统一可扩展固件接口论坛">统一可扩展固件接口论坛</a>（Unified EFI Forum）來推廣與發展，為了凸顯這一點，EFI也更名為UEFI（Unified EFI）。UEFI论坛的創始者是11家知名電腦公司，包括Intel、<a href="https://zh.wikipedia.org/wiki/IBM" title="IBM">IBM</a>等硬件廠商，軟件廠商<a class="mw-redirect" href="https://zh.wikipedia.org/wiki/Microsoft" title="Microsoft">Microsoft</a>，及BIOS廠商<span class="ilh-all" data-foreign-title="American Megatrends" data-lang-code="en" data-lang-name="英语" data-orig-title="American Megatrends"><span class="ilh-page"><a class="new" href="https://zh.wikipedia.org/w/index.php?title=American_Megatrends&amp;action=edit&amp;redlink=1" original-title="American Megatrends（页面不存在）">AMI</a></span></span>、<a class="mw-redirect" href="https://zh.wikipedia.org/wiki/Insyde" title="Insyde">Insyde</a>及<span class="ilh-all" data-foreign-title="Phoenix Technologies" data-lang-code="en" data-lang-name="英语" data-orig-title="Phoenix Technologies"><span class="ilh-page"><a class="new" href="https://zh.wikipedia.org/w/index.php?title=Phoenix_Technologies&amp;action=edit&amp;redlink=1" original-title="Phoenix Technologies（页面不存在）">Phoenix</a></span></span>。</p>
<p><strong>HTML:Hyper Text Markup Language</strong></p>
<p><span><b>动态主机設定協定 </b>是一個用于<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AE" title="网际协议">IP</a>网络的<a class="mw-redirect" href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE" title="网络协议">网络协议</a>，位于<a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B" title="OSI模型">OSI模型</a>的<a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E5%B1%82" title="应用层">应用层</a>，使用<a href="https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AE" title="用户数据报协议">UDP</a>协议工作，主要有兩個用途：</span></p>
<ul>
<li><span>用于內部網路或網絡服務供應商自動分配<a href="https://zh.wikipedia.org/wiki/IP%E5%9C%B0%E5%9D%80" title="IP地址">IP地址</a>給用戶</span></li>
<li><span>用于內部網路管理員對所有電腦作中央管理</span></li>
</ul>
<p><strong>NAT:Network Address Translation</strong></p>
<p><span>1990年代中期，<span lang="en">NAT</span>是作为一种解决<a href="https://zh.wikipedia.org/wiki/IPv4%E4%BD%8D%E5%9D%80%E6%9E%AF%E7%AB%AD" title="IPv4位址枯竭">IPv4地址短缺</a>以避免保留IP地址困难的方案而      流行起来的。网络地址转换在很多国家广泛使用。所以NAT就成了家庭和小型办公        室网络连接上的路由器的一个标准特征，因为对他们来说，申请独立的IP地址的代        价要高于所带来的效益。</span></p>
<p><span>在一个典型的配置中，一个本地网络使用一个专有网络的指定子网（比如                  192.168.x.x或10.x.x.x）和连在这个网络上的一个路由器。这个路由器占有这个网路 地址空间的一个专有地址（比如192.168.0.1），同时它还通过一个或多个<a class="mw-redirect" href="https://zh.wikipedia.org/wiki/%E5%9B%A0%E7%89%B9%E7%BD%91%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E5%95%86" title="因特网服务提供商">因特网服务提供商</a>提供的公有的<span lang="en">IP</span>地址（叫做“过载”<span lang="en">NAT</span>）连接到因特网上。当信息由本地网络向因特网传递时，源地址从专有地址转换为公用地址。由路由器跟踪每个连接上的基本数据，主要是目的地址和端口。当有回复返回路由器时，它通过输出阶段记录的连接跟踪数据来决定该转发给内部网的哪个主机；如果有多个公用地址可用，当数据包返回时，<a class="mw-disambig" href="https://zh.wikipedia.org/wiki/TCP" title="TCP">TCP</a>或<a class="mw-disambig" href="https://zh.wikipedia.org/wiki/UDP" title="UDP">UDP</a>客户机的端口号可以用来分解数据包。对于因特网上的通信，路由器本身充当源和目的。</span></p>
<p><span>流行在网络上的一种看法认为，<a href="https://zh.wikipedia.org/wiki/IPv6" title="IPv6">IPv6</a>的廣泛採用將使得NAT不再需要，因為NAT只是一個處理IPv4的地址空間不足的方法。</span></p>
<h1>喵~~</h1>
<p><img alt="" height="184" src="/images/01.jpg" width="274"/></p>
<p><img alt="" height="225" src="/images/02.jpg" width="225"/></p>
<p><img alt="" height="185" src="/images/03.jpg" width="273"/></p>
<p><img alt="" height="168" src="/images/04.jpg" width="300"/></p>
<p><img alt="" height="163" src="/images/05.jpg" width="310"/></p>
<p><img alt="" height="206" src="/images/06.jpg" width="245"/></p>